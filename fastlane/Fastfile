# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

ENV['ARTIFACTORY_URL'] = 'https://artifactory.tools.ottcds.com/artifactory'

def read_properties(filePath)
    propsMap = {}
    File.foreach(filePath) do |line|

    next if line.start_with?("#") or !line.include?("=")
        k, v = line.split("=")
        propsMap[k] = v.chomp
    end

    propsMap
end

platform :android do
    before_all do
        if File.exists?('/home/jenkins/.gradle/gradle.properties')
            localPropsMap = read_properties('/home/jenkins/.gradle/gradle.properties')
        elsif File.exists?('../local.properties')
            localPropsMap = read_properties('../local.properties')
        else
            localPropsMap = read_properties('../gradle.properties')
        end

        ENV['ARTIFACTORY_USER'] = localPropsMap['new_artifactory_write_username']
        ENV['ARTIFACTORY_PASSWORD'] = localPropsMap['new_artifactory_write_password']
        ENV['ARTIFACTORY_PATH'] = localPropsMap['new_artifactory_cvsdk_path']

        ensure_environment_variables
    end

    desc 'Check all environment variables have been set'
    lane :check do
        ensure_environment_variables
    end

    desc "Runs all the tests"
    lane :test do
        gradle(task: "clean lintRelease testRelease")
    end

    desc "Display the version we're building"
    lane :displayTargetVersion do
        UI.success(getAndParseVersion())
    end

    desc 'Deploy a new SNAPSHOT version to Artifactory'
    lane :stage do
        deploy(repo: 'sky-snapshots-local')
    end

	  desc 'Tags build, upload to Artifactory and creates GitHub release'
	  private_lane :deploy do |options|
		  ensure_environment_variables

		  versions = getAndParseVersion()
		  version = "v#{versions.first}"
		  buildAars(versions)

		  publishToArtifactoryWithGradle(options[:repo], versions)
	  end

    def publishToArtifactoryWithGradle(repo, versions)
        properties = "-PMAJOR=#{versions.at(1)} -PMINOR=#{versions.at(2)} -PREVISION=#{versions.at(3)} -PBUILD=#{versions.at(4)} -Partifactory_url=#{ENV['ARTIFACTORY_URL']} -Partifactory_repo=#{repo} -Partifactory_username=#{ENV['ARTIFACTORY_USER']} -Partifactory_password=#{ENV['ARTIFACTORY_PASSWORD']}"
        flags = '-Dorg.gradle.parallel=false'

        gradle(
            task: "sourcesJar javadocJar generatePomFileForAarReleasePublication artifactoryPublish",
            flags: "-Dorg.gradle.parallel=false",
            properties: {
                "MAJOR" => versions.at(1),
                "MINOR" => versions.at(2),
                "REVISION" => versions.at(3),
                "BUILD" => versions.at(4),
                "artifactory_url" => ENV['ARTIFACTORY_URL'],
                "artifactory_path" => ENV['ARTIFACTORY_PATH'],
                "artifactory_username" => ENV['ARTIFACTORY_USER'],
                "artifactory_password" => ENV['ARTIFACTORY_PASSWORD']
            }
        )
    end

	  desc 'Build library files'
	  def buildAars(versions)
	      gradle(
            task: 'clean lintRelease testRelease assembleRelease',
            flags: '-Dorg.gradle.parallel=false'
        )
	  end

    desc "Assert that the requisite environment variables a represent in order to deploy"
    def ensure_environment_variables
        requiredList = ['ARTIFACTORY_URL', 'ARTIFACTORY_PATH', 'ARTIFACTORY_USER', 'ARTIFACTORY_PASSWORD']

        for required in requiredList do
            if ENV[required].nil? || ENV[required].length == 0
                UI.user_error!("Environment variable #{required} has not been set or is empty")
            end
        end

        UI.success('All environment variables set')
    end

    desc "Get the version to build"
    def getAndParseVersion
        gradle(task: "readVersion", print_command_output: false).each_line do |line|
            if line =~ /\d+\.\d+\.\d+-cvsdk-[0-9a-f]{7}/
                actualVersion = line.chop()

                # Break down into major/minor/revision
                versions = actualVersion.split('.')

                unless versions.length.eql? 3
                    UI.user_error!("Gradle version does not match major.minor.revision format: #{gradle_version}")
                end

                patch = versions.at(2).split('-', 2)
                return [versions.at(0) + "." + versions.at(1) + "." + patch.at(0) + patch.at(1),
                  versions.at(0), versions.at(1), patch.at(0), patch.at(1)]
            end
        end
    end
end
